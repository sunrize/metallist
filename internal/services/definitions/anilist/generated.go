// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package anilist

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// The format the media was released in
type MediaFormat string

const (
	// Anime broadcast on television
	MediaFormatTv MediaFormat = "TV"
	// Anime which are under 15 minutes in length and broadcast on television
	MediaFormatTvShort MediaFormat = "TV_SHORT"
	// Anime movies with a theatrical release
	MediaFormatMovie MediaFormat = "MOVIE"
	// Special episodes that have been included in DVD/Blu-ray releases, picture dramas, pilots, etc
	MediaFormatSpecial MediaFormat = "SPECIAL"
	// (Original Video Animation) Anime that have been released directly on DVD/Blu-ray without originally going through a theatrical release or television broadcast
	MediaFormatOva MediaFormat = "OVA"
	// (Original Net Animation) Anime that have been originally released online or are only available through streaming services.
	MediaFormatOna MediaFormat = "ONA"
	// Short anime released as a music video
	MediaFormatMusic MediaFormat = "MUSIC"
	// Professionally published manga with more than one chapter
	MediaFormatManga MediaFormat = "MANGA"
	// Written books released as a series of light novels
	MediaFormatNovel MediaFormat = "NOVEL"
	// Manga with just one chapter
	MediaFormatOneShot MediaFormat = "ONE_SHOT"
)

// Media list watching/reading status enum.
type MediaListStatus string

const (
	// Currently watching/reading
	MediaListStatusCurrent MediaListStatus = "CURRENT"
	// Planning to watch/read
	MediaListStatusPlanning MediaListStatus = "PLANNING"
	// Finished watching/reading
	MediaListStatusCompleted MediaListStatus = "COMPLETED"
	// Stopped watching/reading before completing
	MediaListStatusDropped MediaListStatus = "DROPPED"
	// Paused watching/reading
	MediaListStatusPaused MediaListStatus = "PAUSED"
	// Re-watching/reading
	MediaListStatusRepeating MediaListStatus = "REPEATING"
)

// Media type enum, anime or manga.
type MediaType string

const (
	// Japanese Anime
	MediaTypeAnime MediaType = "ANIME"
	// Asian comic
	MediaTypeManga MediaType = "MANGA"
)

// __getPageUserMediaListInput is used internally by genqlient
type __getPageUserMediaListInput struct {
	Page      int             `json:"page"`
	PerPage   int             `json:"perPage"`
	UserId    int             `json:"userId"`
	MediaType MediaType       `json:"mediaType"`
	Status    MediaListStatus `json:"status"`
}

// GetPage returns __getPageUserMediaListInput.Page, and is useful for accessing the field via an interface.
func (v *__getPageUserMediaListInput) GetPage() int { return v.Page }

// GetPerPage returns __getPageUserMediaListInput.PerPage, and is useful for accessing the field via an interface.
func (v *__getPageUserMediaListInput) GetPerPage() int { return v.PerPage }

// GetUserId returns __getPageUserMediaListInput.UserId, and is useful for accessing the field via an interface.
func (v *__getPageUserMediaListInput) GetUserId() int { return v.UserId }

// GetMediaType returns __getPageUserMediaListInput.MediaType, and is useful for accessing the field via an interface.
func (v *__getPageUserMediaListInput) GetMediaType() MediaType { return v.MediaType }

// GetStatus returns __getPageUserMediaListInput.Status, and is useful for accessing the field via an interface.
func (v *__getPageUserMediaListInput) GetStatus() MediaListStatus { return v.Status }

// __getShortUserMediaListCollectionByStatusInput is used internally by genqlient
type __getShortUserMediaListCollectionByStatusInput struct {
	UserId    int             `json:"userId"`
	MediaType MediaType       `json:"mediaType"`
	Status    MediaListStatus `json:"status"`
}

// GetUserId returns __getShortUserMediaListCollectionByStatusInput.UserId, and is useful for accessing the field via an interface.
func (v *__getShortUserMediaListCollectionByStatusInput) GetUserId() int { return v.UserId }

// GetMediaType returns __getShortUserMediaListCollectionByStatusInput.MediaType, and is useful for accessing the field via an interface.
func (v *__getShortUserMediaListCollectionByStatusInput) GetMediaType() MediaType { return v.MediaType }

// GetStatus returns __getShortUserMediaListCollectionByStatusInput.Status, and is useful for accessing the field via an interface.
func (v *__getShortUserMediaListCollectionByStatusInput) GetStatus() MediaListStatus { return v.Status }

// __getUserIDInput is used internally by genqlient
type __getUserIDInput struct {
	Name string `json:"name"`
}

// GetName returns __getUserIDInput.Name, and is useful for accessing the field via an interface.
func (v *__getUserIDInput) GetName() string { return v.Name }

// __getUserMediaListCollectionByStatusInput is used internally by genqlient
type __getUserMediaListCollectionByStatusInput struct {
	UserId    int             `json:"userId"`
	MediaType MediaType       `json:"mediaType"`
	Status    MediaListStatus `json:"status"`
}

// GetUserId returns __getUserMediaListCollectionByStatusInput.UserId, and is useful for accessing the field via an interface.
func (v *__getUserMediaListCollectionByStatusInput) GetUserId() int { return v.UserId }

// GetMediaType returns __getUserMediaListCollectionByStatusInput.MediaType, and is useful for accessing the field via an interface.
func (v *__getUserMediaListCollectionByStatusInput) GetMediaType() MediaType { return v.MediaType }

// GetStatus returns __getUserMediaListCollectionByStatusInput.Status, and is useful for accessing the field via an interface.
func (v *__getUserMediaListCollectionByStatusInput) GetStatus() MediaListStatus { return v.Status }

// __getUserMediaListCollectionInput is used internally by genqlient
type __getUserMediaListCollectionInput struct {
	UserId    int       `json:"userId"`
	MediaType MediaType `json:"mediaType"`
}

// GetUserId returns __getUserMediaListCollectionInput.UserId, and is useful for accessing the field via an interface.
func (v *__getUserMediaListCollectionInput) GetUserId() int { return v.UserId }

// GetMediaType returns __getUserMediaListCollectionInput.MediaType, and is useful for accessing the field via an interface.
func (v *__getUserMediaListCollectionInput) GetMediaType() MediaType { return v.MediaType }

// __getUserMediaListInput is used internally by genqlient
type __getUserMediaListInput struct {
	UserId    int             `json:"userId"`
	MediaType MediaType       `json:"mediaType"`
	Status    MediaListStatus `json:"status"`
}

// GetUserId returns __getUserMediaListInput.UserId, and is useful for accessing the field via an interface.
func (v *__getUserMediaListInput) GetUserId() int { return v.UserId }

// GetMediaType returns __getUserMediaListInput.MediaType, and is useful for accessing the field via an interface.
func (v *__getUserMediaListInput) GetMediaType() MediaType { return v.MediaType }

// GetStatus returns __getUserMediaListInput.Status, and is useful for accessing the field via an interface.
func (v *__getUserMediaListInput) GetStatus() MediaListStatus { return v.Status }

// __updateMediaProgressInput is used internally by genqlient
type __updateMediaProgressInput struct {
	MediaId  int `json:"mediaId"`
	Progress int `json:"progress"`
}

// GetMediaId returns __updateMediaProgressInput.MediaId, and is useful for accessing the field via an interface.
func (v *__updateMediaProgressInput) GetMediaId() int { return v.MediaId }

// GetProgress returns __updateMediaProgressInput.Progress, and is useful for accessing the field via an interface.
func (v *__updateMediaProgressInput) GetProgress() int { return v.Progress }

// __updateMediaStatusInput is used internally by genqlient
type __updateMediaStatusInput struct {
	MediaId int             `json:"mediaId"`
	Status  MediaListStatus `json:"status"`
}

// GetMediaId returns __updateMediaStatusInput.MediaId, and is useful for accessing the field via an interface.
func (v *__updateMediaStatusInput) GetMediaId() int { return v.MediaId }

// GetStatus returns __updateMediaStatusInput.Status, and is useful for accessing the field via an interface.
func (v *__updateMediaStatusInput) GetStatus() MediaListStatus { return v.Status }

// getPageUserMediaListPage includes the requested fields of the GraphQL type Page.
// The GraphQL type's documentation follows.
//
// Page of data
type getPageUserMediaListPage struct {
	// The pagination information
	PageInfo  getPageUserMediaListPagePageInfo    `json:"pageInfo"`
	MediaList []getPageUserMediaListPageMediaList `json:"mediaList"`
}

// GetPageInfo returns getPageUserMediaListPage.PageInfo, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPage) GetPageInfo() getPageUserMediaListPagePageInfo { return v.PageInfo }

// GetMediaList returns getPageUserMediaListPage.MediaList, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPage) GetMediaList() []getPageUserMediaListPageMediaList {
	return v.MediaList
}

// getPageUserMediaListPageMediaList includes the requested fields of the GraphQL type MediaList.
// The GraphQL type's documentation follows.
//
// List of anime or manga
type getPageUserMediaListPageMediaList struct {
	// The id of the list entry
	Id int `json:"id"`
	// The id of the media
	MediaId int `json:"mediaId"`
	// The watching/reading status
	Status MediaListStatus `json:"status"`
	// The amount of episodes/chapters consumed by the user
	Progress int                                    `json:"progress"`
	Media    getPageUserMediaListPageMediaListMedia `json:"media"`
}

// GetId returns getPageUserMediaListPageMediaList.Id, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPageMediaList) GetId() int { return v.Id }

// GetMediaId returns getPageUserMediaListPageMediaList.MediaId, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPageMediaList) GetMediaId() int { return v.MediaId }

// GetStatus returns getPageUserMediaListPageMediaList.Status, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPageMediaList) GetStatus() MediaListStatus { return v.Status }

// GetProgress returns getPageUserMediaListPageMediaList.Progress, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPageMediaList) GetProgress() int { return v.Progress }

// GetMedia returns getPageUserMediaListPageMediaList.Media, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPageMediaList) GetMedia() getPageUserMediaListPageMediaListMedia {
	return v.Media
}

// getPageUserMediaListPageMediaListMedia includes the requested fields of the GraphQL type Media.
// The GraphQL type's documentation follows.
//
// Anime or Manga
type getPageUserMediaListPageMediaListMedia struct {
	// The id of the media
	Id int `json:"id"`
	// The mal id of the media
	IdMal int `json:"idMal"`
	// The official titles of the media in various languages
	Title getPageUserMediaListPageMediaListMediaTitle `json:"title"`
	// The format the media was released in
	Format MediaFormat `json:"format"`
	// Alternative titles of the media
	Synonyms []string `json:"synonyms"`
}

// GetId returns getPageUserMediaListPageMediaListMedia.Id, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPageMediaListMedia) GetId() int { return v.Id }

// GetIdMal returns getPageUserMediaListPageMediaListMedia.IdMal, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPageMediaListMedia) GetIdMal() int { return v.IdMal }

// GetTitle returns getPageUserMediaListPageMediaListMedia.Title, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPageMediaListMedia) GetTitle() getPageUserMediaListPageMediaListMediaTitle {
	return v.Title
}

// GetFormat returns getPageUserMediaListPageMediaListMedia.Format, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPageMediaListMedia) GetFormat() MediaFormat { return v.Format }

// GetSynonyms returns getPageUserMediaListPageMediaListMedia.Synonyms, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPageMediaListMedia) GetSynonyms() []string { return v.Synonyms }

// getPageUserMediaListPageMediaListMediaTitle includes the requested fields of the GraphQL type MediaTitle.
// The GraphQL type's documentation follows.
//
// The official titles of the media in various languages
type getPageUserMediaListPageMediaListMediaTitle struct {
	// The romanization of the native language title
	Romaji string `json:"romaji"`
	// The official english title
	English string `json:"english"`
	// Official title in it's native language
	Native string `json:"native"`
	// The currently authenticated users preferred title language. Default romaji for non-authenticated
	UserPreferred string `json:"userPreferred"`
}

// GetRomaji returns getPageUserMediaListPageMediaListMediaTitle.Romaji, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPageMediaListMediaTitle) GetRomaji() string { return v.Romaji }

// GetEnglish returns getPageUserMediaListPageMediaListMediaTitle.English, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPageMediaListMediaTitle) GetEnglish() string { return v.English }

// GetNative returns getPageUserMediaListPageMediaListMediaTitle.Native, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPageMediaListMediaTitle) GetNative() string { return v.Native }

// GetUserPreferred returns getPageUserMediaListPageMediaListMediaTitle.UserPreferred, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPageMediaListMediaTitle) GetUserPreferred() string {
	return v.UserPreferred
}

// getPageUserMediaListPagePageInfo includes the requested fields of the GraphQL type PageInfo.
type getPageUserMediaListPagePageInfo struct {
	// The total number of items. Note: This value is not guaranteed to be accurate, do not rely on this for logic
	Total int `json:"total"`
	// The current page
	CurrentPage int `json:"currentPage"`
	// The last page
	LastPage int `json:"lastPage"`
	// If there is another page
	HasNextPage bool `json:"hasNextPage"`
	// The count on a page
	PerPage int `json:"perPage"`
}

// GetTotal returns getPageUserMediaListPagePageInfo.Total, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPagePageInfo) GetTotal() int { return v.Total }

// GetCurrentPage returns getPageUserMediaListPagePageInfo.CurrentPage, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPagePageInfo) GetCurrentPage() int { return v.CurrentPage }

// GetLastPage returns getPageUserMediaListPagePageInfo.LastPage, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPagePageInfo) GetLastPage() int { return v.LastPage }

// GetHasNextPage returns getPageUserMediaListPagePageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPagePageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetPerPage returns getPageUserMediaListPagePageInfo.PerPage, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListPagePageInfo) GetPerPage() int { return v.PerPage }

// getPageUserMediaListResponse is returned by getPageUserMediaList on success.
type getPageUserMediaListResponse struct {
	Page getPageUserMediaListPage `json:"Page"`
}

// GetPage returns getPageUserMediaListResponse.Page, and is useful for accessing the field via an interface.
func (v *getPageUserMediaListResponse) GetPage() getPageUserMediaListPage { return v.Page }

// getShortUserMediaListCollectionByStatusMediaListCollection includes the requested fields of the GraphQL type MediaListCollection.
// The GraphQL type's documentation follows.
//
// List of anime or manga
type getShortUserMediaListCollectionByStatusMediaListCollection struct {
	// Grouped media list entries
	Lists []getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup `json:"lists"`
	// If there is another chunk
	HasNextChunk bool `json:"hasNextChunk"`
}

// GetLists returns getShortUserMediaListCollectionByStatusMediaListCollection.Lists, and is useful for accessing the field via an interface.
func (v *getShortUserMediaListCollectionByStatusMediaListCollection) GetLists() []getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup {
	return v.Lists
}

// GetHasNextChunk returns getShortUserMediaListCollectionByStatusMediaListCollection.HasNextChunk, and is useful for accessing the field via an interface.
func (v *getShortUserMediaListCollectionByStatusMediaListCollection) GetHasNextChunk() bool {
	return v.HasNextChunk
}

// getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup includes the requested fields of the GraphQL type MediaListGroup.
// The GraphQL type's documentation follows.
//
// List group of anime or manga entries
type getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup struct {
	// Media list entries
	Entries              []getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList `json:"entries"`
	Name                 string                                                                                          `json:"name"`
	IsCustomList         bool                                                                                            `json:"isCustomList"`
	IsSplitCompletedList bool                                                                                            `json:"isSplitCompletedList"`
	Status               MediaListStatus                                                                                 `json:"status"`
}

// GetEntries returns getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup.Entries, and is useful for accessing the field via an interface.
func (v *getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup) GetEntries() []getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList {
	return v.Entries
}

// GetName returns getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup.Name, and is useful for accessing the field via an interface.
func (v *getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup) GetName() string {
	return v.Name
}

// GetIsCustomList returns getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup.IsCustomList, and is useful for accessing the field via an interface.
func (v *getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup) GetIsCustomList() bool {
	return v.IsCustomList
}

// GetIsSplitCompletedList returns getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup.IsSplitCompletedList, and is useful for accessing the field via an interface.
func (v *getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup) GetIsSplitCompletedList() bool {
	return v.IsSplitCompletedList
}

// GetStatus returns getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup.Status, and is useful for accessing the field via an interface.
func (v *getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup) GetStatus() MediaListStatus {
	return v.Status
}

// getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList includes the requested fields of the GraphQL type MediaList.
// The GraphQL type's documentation follows.
//
// List of anime or manga
type getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList struct {
	// The id of the list entry
	Id int `json:"id"`
	// The id of the media
	MediaId int `json:"mediaId"`
	// The amount of episodes/chapters consumed by the user
	Progress int `json:"progress"`
}

// GetId returns getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList.Id, and is useful for accessing the field via an interface.
func (v *getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList) GetId() int {
	return v.Id
}

// GetMediaId returns getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList.MediaId, and is useful for accessing the field via an interface.
func (v *getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList) GetMediaId() int {
	return v.MediaId
}

// GetProgress returns getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList.Progress, and is useful for accessing the field via an interface.
func (v *getShortUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList) GetProgress() int {
	return v.Progress
}

// getShortUserMediaListCollectionByStatusResponse is returned by getShortUserMediaListCollectionByStatus on success.
type getShortUserMediaListCollectionByStatusResponse struct {
	// Media list collection query, provides list pre-grouped by status & custom lists. User ID and Media Type arguments required.
	MediaListCollection getShortUserMediaListCollectionByStatusMediaListCollection `json:"MediaListCollection"`
}

// GetMediaListCollection returns getShortUserMediaListCollectionByStatusResponse.MediaListCollection, and is useful for accessing the field via an interface.
func (v *getShortUserMediaListCollectionByStatusResponse) GetMediaListCollection() getShortUserMediaListCollectionByStatusMediaListCollection {
	return v.MediaListCollection
}

// getUserIDResponse is returned by getUserID on success.
type getUserIDResponse struct {
	// User query
	User getUserIDUser `json:"User"`
}

// GetUser returns getUserIDResponse.User, and is useful for accessing the field via an interface.
func (v *getUserIDResponse) GetUser() getUserIDUser { return v.User }

// getUserIDUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user
type getUserIDUser struct {
	// The id of the user
	Id int `json:"id"`
}

// GetId returns getUserIDUser.Id, and is useful for accessing the field via an interface.
func (v *getUserIDUser) GetId() int { return v.Id }

// getUserMediaListCollectionByStatusMediaListCollection includes the requested fields of the GraphQL type MediaListCollection.
// The GraphQL type's documentation follows.
//
// List of anime or manga
type getUserMediaListCollectionByStatusMediaListCollection struct {
	// Grouped media list entries
	Lists []getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup `json:"lists"`
	// If there is another chunk
	HasNextChunk bool `json:"hasNextChunk"`
}

// GetLists returns getUserMediaListCollectionByStatusMediaListCollection.Lists, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollection) GetLists() []getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup {
	return v.Lists
}

// GetHasNextChunk returns getUserMediaListCollectionByStatusMediaListCollection.HasNextChunk, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollection) GetHasNextChunk() bool {
	return v.HasNextChunk
}

// getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup includes the requested fields of the GraphQL type MediaListGroup.
// The GraphQL type's documentation follows.
//
// List group of anime or manga entries
type getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup struct {
	// Media list entries
	Entries              []getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList `json:"entries"`
	Name                 string                                                                                     `json:"name"`
	IsCustomList         bool                                                                                       `json:"isCustomList"`
	IsSplitCompletedList bool                                                                                       `json:"isSplitCompletedList"`
	Status               MediaListStatus                                                                            `json:"status"`
}

// GetEntries returns getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup.Entries, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup) GetEntries() []getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList {
	return v.Entries
}

// GetName returns getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup.Name, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup) GetName() string {
	return v.Name
}

// GetIsCustomList returns getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup.IsCustomList, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup) GetIsCustomList() bool {
	return v.IsCustomList
}

// GetIsSplitCompletedList returns getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup.IsSplitCompletedList, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup) GetIsSplitCompletedList() bool {
	return v.IsSplitCompletedList
}

// GetStatus returns getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup.Status, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroup) GetStatus() MediaListStatus {
	return v.Status
}

// getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList includes the requested fields of the GraphQL type MediaList.
// The GraphQL type's documentation follows.
//
// List of anime or manga
type getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList struct {
	// The id of the list entry
	Id int `json:"id"`
	// The id of the media
	MediaId int `json:"mediaId"`
	// The amount of episodes/chapters consumed by the user
	Progress int                                                                                           `json:"progress"`
	Media    getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMedia `json:"media"`
}

// GetId returns getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList.Id, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList) GetId() int {
	return v.Id
}

// GetMediaId returns getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList.MediaId, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList) GetMediaId() int {
	return v.MediaId
}

// GetProgress returns getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList.Progress, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList) GetProgress() int {
	return v.Progress
}

// GetMedia returns getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList.Media, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaList) GetMedia() getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMedia {
	return v.Media
}

// getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMedia includes the requested fields of the GraphQL type Media.
// The GraphQL type's documentation follows.
//
// Anime or Manga
type getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMedia struct {
	// The id of the media
	Id int `json:"id"`
	// The mal id of the media
	IdMal int `json:"idMal"`
	// The official titles of the media in various languages
	Title getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMediaTitle `json:"title"`
	// The format the media was released in
	Format MediaFormat `json:"format"`
	// Alternative titles of the media
	Synonyms []string `json:"synonyms"`
}

// GetId returns getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMedia.Id, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMedia) GetId() int {
	return v.Id
}

// GetIdMal returns getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMedia.IdMal, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMedia) GetIdMal() int {
	return v.IdMal
}

// GetTitle returns getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMedia.Title, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMedia) GetTitle() getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMediaTitle {
	return v.Title
}

// GetFormat returns getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMedia.Format, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMedia) GetFormat() MediaFormat {
	return v.Format
}

// GetSynonyms returns getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMedia.Synonyms, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMedia) GetSynonyms() []string {
	return v.Synonyms
}

// getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMediaTitle includes the requested fields of the GraphQL type MediaTitle.
// The GraphQL type's documentation follows.
//
// The official titles of the media in various languages
type getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMediaTitle struct {
	// The romanization of the native language title
	Romaji string `json:"romaji"`
	// The official english title
	English string `json:"english"`
	// Official title in it's native language
	Native string `json:"native"`
	// The currently authenticated users preferred title language. Default romaji for non-authenticated
	UserPreferred string `json:"userPreferred"`
}

// GetRomaji returns getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMediaTitle.Romaji, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMediaTitle) GetRomaji() string {
	return v.Romaji
}

// GetEnglish returns getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMediaTitle.English, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMediaTitle) GetEnglish() string {
	return v.English
}

// GetNative returns getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMediaTitle.Native, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMediaTitle) GetNative() string {
	return v.Native
}

// GetUserPreferred returns getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMediaTitle.UserPreferred, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusMediaListCollectionListsMediaListGroupEntriesMediaListMediaTitle) GetUserPreferred() string {
	return v.UserPreferred
}

// getUserMediaListCollectionByStatusResponse is returned by getUserMediaListCollectionByStatus on success.
type getUserMediaListCollectionByStatusResponse struct {
	// Media list collection query, provides list pre-grouped by status & custom lists. User ID and Media Type arguments required.
	MediaListCollection getUserMediaListCollectionByStatusMediaListCollection `json:"MediaListCollection"`
}

// GetMediaListCollection returns getUserMediaListCollectionByStatusResponse.MediaListCollection, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionByStatusResponse) GetMediaListCollection() getUserMediaListCollectionByStatusMediaListCollection {
	return v.MediaListCollection
}

// getUserMediaListCollectionMediaListCollection includes the requested fields of the GraphQL type MediaListCollection.
// The GraphQL type's documentation follows.
//
// List of anime or manga
type getUserMediaListCollectionMediaListCollection struct {
	// Grouped media list entries
	Lists []getUserMediaListCollectionMediaListCollectionListsMediaListGroup `json:"lists"`
	// If there is another chunk
	HasNextChunk bool `json:"hasNextChunk"`
}

// GetLists returns getUserMediaListCollectionMediaListCollection.Lists, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionMediaListCollection) GetLists() []getUserMediaListCollectionMediaListCollectionListsMediaListGroup {
	return v.Lists
}

// GetHasNextChunk returns getUserMediaListCollectionMediaListCollection.HasNextChunk, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionMediaListCollection) GetHasNextChunk() bool { return v.HasNextChunk }

// getUserMediaListCollectionMediaListCollectionListsMediaListGroup includes the requested fields of the GraphQL type MediaListGroup.
// The GraphQL type's documentation follows.
//
// List group of anime or manga entries
type getUserMediaListCollectionMediaListCollectionListsMediaListGroup struct {
	Name                 string          `json:"name"`
	IsCustomList         bool            `json:"isCustomList"`
	IsSplitCompletedList bool            `json:"isSplitCompletedList"`
	Status               MediaListStatus `json:"status"`
}

// GetName returns getUserMediaListCollectionMediaListCollectionListsMediaListGroup.Name, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionMediaListCollectionListsMediaListGroup) GetName() string {
	return v.Name
}

// GetIsCustomList returns getUserMediaListCollectionMediaListCollectionListsMediaListGroup.IsCustomList, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionMediaListCollectionListsMediaListGroup) GetIsCustomList() bool {
	return v.IsCustomList
}

// GetIsSplitCompletedList returns getUserMediaListCollectionMediaListCollectionListsMediaListGroup.IsSplitCompletedList, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionMediaListCollectionListsMediaListGroup) GetIsSplitCompletedList() bool {
	return v.IsSplitCompletedList
}

// GetStatus returns getUserMediaListCollectionMediaListCollectionListsMediaListGroup.Status, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionMediaListCollectionListsMediaListGroup) GetStatus() MediaListStatus {
	return v.Status
}

// getUserMediaListCollectionResponse is returned by getUserMediaListCollection on success.
type getUserMediaListCollectionResponse struct {
	// Media list collection query, provides list pre-grouped by status & custom lists. User ID and Media Type arguments required.
	MediaListCollection getUserMediaListCollectionMediaListCollection `json:"MediaListCollection"`
}

// GetMediaListCollection returns getUserMediaListCollectionResponse.MediaListCollection, and is useful for accessing the field via an interface.
func (v *getUserMediaListCollectionResponse) GetMediaListCollection() getUserMediaListCollectionMediaListCollection {
	return v.MediaListCollection
}

// getUserMediaListMediaList includes the requested fields of the GraphQL type MediaList.
// The GraphQL type's documentation follows.
//
// List of anime or manga
type getUserMediaListMediaList struct {
	// The id of the list entry
	Id int `json:"id"`
	// The id of the media
	MediaId int `json:"mediaId"`
	// The watching/reading status
	Status MediaListStatus `json:"status"`
	// The amount of episodes/chapters consumed by the user
	Progress int                            `json:"progress"`
	Media    getUserMediaListMediaListMedia `json:"media"`
}

// GetId returns getUserMediaListMediaList.Id, and is useful for accessing the field via an interface.
func (v *getUserMediaListMediaList) GetId() int { return v.Id }

// GetMediaId returns getUserMediaListMediaList.MediaId, and is useful for accessing the field via an interface.
func (v *getUserMediaListMediaList) GetMediaId() int { return v.MediaId }

// GetStatus returns getUserMediaListMediaList.Status, and is useful for accessing the field via an interface.
func (v *getUserMediaListMediaList) GetStatus() MediaListStatus { return v.Status }

// GetProgress returns getUserMediaListMediaList.Progress, and is useful for accessing the field via an interface.
func (v *getUserMediaListMediaList) GetProgress() int { return v.Progress }

// GetMedia returns getUserMediaListMediaList.Media, and is useful for accessing the field via an interface.
func (v *getUserMediaListMediaList) GetMedia() getUserMediaListMediaListMedia { return v.Media }

// getUserMediaListMediaListMedia includes the requested fields of the GraphQL type Media.
// The GraphQL type's documentation follows.
//
// Anime or Manga
type getUserMediaListMediaListMedia struct {
	// The id of the media
	Id int `json:"id"`
	// The mal id of the media
	IdMal int `json:"idMal"`
	// The official titles of the media in various languages
	Title getUserMediaListMediaListMediaTitle `json:"title"`
	// The format the media was released in
	Format MediaFormat `json:"format"`
	// Alternative titles of the media
	Synonyms []string `json:"synonyms"`
}

// GetId returns getUserMediaListMediaListMedia.Id, and is useful for accessing the field via an interface.
func (v *getUserMediaListMediaListMedia) GetId() int { return v.Id }

// GetIdMal returns getUserMediaListMediaListMedia.IdMal, and is useful for accessing the field via an interface.
func (v *getUserMediaListMediaListMedia) GetIdMal() int { return v.IdMal }

// GetTitle returns getUserMediaListMediaListMedia.Title, and is useful for accessing the field via an interface.
func (v *getUserMediaListMediaListMedia) GetTitle() getUserMediaListMediaListMediaTitle {
	return v.Title
}

// GetFormat returns getUserMediaListMediaListMedia.Format, and is useful for accessing the field via an interface.
func (v *getUserMediaListMediaListMedia) GetFormat() MediaFormat { return v.Format }

// GetSynonyms returns getUserMediaListMediaListMedia.Synonyms, and is useful for accessing the field via an interface.
func (v *getUserMediaListMediaListMedia) GetSynonyms() []string { return v.Synonyms }

// getUserMediaListMediaListMediaTitle includes the requested fields of the GraphQL type MediaTitle.
// The GraphQL type's documentation follows.
//
// The official titles of the media in various languages
type getUserMediaListMediaListMediaTitle struct {
	// The romanization of the native language title
	Romaji string `json:"romaji"`
	// The official english title
	English string `json:"english"`
	// Official title in it's native language
	Native string `json:"native"`
	// The currently authenticated users preferred title language. Default romaji for non-authenticated
	UserPreferred string `json:"userPreferred"`
}

// GetRomaji returns getUserMediaListMediaListMediaTitle.Romaji, and is useful for accessing the field via an interface.
func (v *getUserMediaListMediaListMediaTitle) GetRomaji() string { return v.Romaji }

// GetEnglish returns getUserMediaListMediaListMediaTitle.English, and is useful for accessing the field via an interface.
func (v *getUserMediaListMediaListMediaTitle) GetEnglish() string { return v.English }

// GetNative returns getUserMediaListMediaListMediaTitle.Native, and is useful for accessing the field via an interface.
func (v *getUserMediaListMediaListMediaTitle) GetNative() string { return v.Native }

// GetUserPreferred returns getUserMediaListMediaListMediaTitle.UserPreferred, and is useful for accessing the field via an interface.
func (v *getUserMediaListMediaListMediaTitle) GetUserPreferred() string { return v.UserPreferred }

// getUserMediaListResponse is returned by getUserMediaList on success.
type getUserMediaListResponse struct {
	// Media list query
	MediaList getUserMediaListMediaList `json:"MediaList"`
}

// GetMediaList returns getUserMediaListResponse.MediaList, and is useful for accessing the field via an interface.
func (v *getUserMediaListResponse) GetMediaList() getUserMediaListMediaList { return v.MediaList }

// updateMediaProgressResponse is returned by updateMediaProgress on success.
type updateMediaProgressResponse struct {
	// Create or update a media list entry
	SaveMediaListEntry updateMediaProgressSaveMediaListEntryMediaList `json:"SaveMediaListEntry"`
}

// GetSaveMediaListEntry returns updateMediaProgressResponse.SaveMediaListEntry, and is useful for accessing the field via an interface.
func (v *updateMediaProgressResponse) GetSaveMediaListEntry() updateMediaProgressSaveMediaListEntryMediaList {
	return v.SaveMediaListEntry
}

// updateMediaProgressSaveMediaListEntryMediaList includes the requested fields of the GraphQL type MediaList.
// The GraphQL type's documentation follows.
//
// List of anime or manga
type updateMediaProgressSaveMediaListEntryMediaList struct {
	// The id of the list entry
	Id int `json:"id"`
	// The watching/reading status
	Status MediaListStatus `json:"status"`
}

// GetId returns updateMediaProgressSaveMediaListEntryMediaList.Id, and is useful for accessing the field via an interface.
func (v *updateMediaProgressSaveMediaListEntryMediaList) GetId() int { return v.Id }

// GetStatus returns updateMediaProgressSaveMediaListEntryMediaList.Status, and is useful for accessing the field via an interface.
func (v *updateMediaProgressSaveMediaListEntryMediaList) GetStatus() MediaListStatus { return v.Status }

// updateMediaStatusResponse is returned by updateMediaStatus on success.
type updateMediaStatusResponse struct {
	// Create or update a media list entry
	SaveMediaListEntry updateMediaStatusSaveMediaListEntryMediaList `json:"SaveMediaListEntry"`
}

// GetSaveMediaListEntry returns updateMediaStatusResponse.SaveMediaListEntry, and is useful for accessing the field via an interface.
func (v *updateMediaStatusResponse) GetSaveMediaListEntry() updateMediaStatusSaveMediaListEntryMediaList {
	return v.SaveMediaListEntry
}

// updateMediaStatusSaveMediaListEntryMediaList includes the requested fields of the GraphQL type MediaList.
// The GraphQL type's documentation follows.
//
// List of anime or manga
type updateMediaStatusSaveMediaListEntryMediaList struct {
	// The id of the list entry
	Id int `json:"id"`
	// The watching/reading status
	Status MediaListStatus `json:"status"`
}

// GetId returns updateMediaStatusSaveMediaListEntryMediaList.Id, and is useful for accessing the field via an interface.
func (v *updateMediaStatusSaveMediaListEntryMediaList) GetId() int { return v.Id }

// GetStatus returns updateMediaStatusSaveMediaListEntryMediaList.Status, and is useful for accessing the field via an interface.
func (v *updateMediaStatusSaveMediaListEntryMediaList) GetStatus() MediaListStatus { return v.Status }

// The query or mutation executed by getPageUserMediaList.
const getPageUserMediaList_Operation = `
query getPageUserMediaList ($page: Int, $perPage: Int, $userId: Int, $mediaType: MediaType, $status: MediaListStatus) {
	Page(page: $page, perPage: $perPage) {
		pageInfo {
			total
			currentPage
			lastPage
			hasNextPage
			perPage
		}
		mediaList(userId: $userId, type: $mediaType, status: $status) {
			id
			mediaId
			status
			progress
			media {
				id
				idMal
				title {
					romaji
					english
					native
					userPreferred
				}
				format
				synonyms
			}
		}
	}
}
`

func getPageUserMediaList(
	ctx_ context.Context,
	client_ graphql.Client,
	page int,
	perPage int,
	userId int,
	mediaType MediaType,
	status MediaListStatus,
) (*getPageUserMediaListResponse, error) {
	req_ := &graphql.Request{
		OpName: "getPageUserMediaList",
		Query:  getPageUserMediaList_Operation,
		Variables: &__getPageUserMediaListInput{
			Page:      page,
			PerPage:   perPage,
			UserId:    userId,
			MediaType: mediaType,
			Status:    status,
		},
	}
	var err_ error

	var data_ getPageUserMediaListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getShortUserMediaListCollectionByStatus.
const getShortUserMediaListCollectionByStatus_Operation = `
query getShortUserMediaListCollectionByStatus ($userId: Int, $mediaType: MediaType, $status: MediaListStatus) {
	MediaListCollection(userId: $userId, type: $mediaType, status: $status) {
		lists {
			entries {
				id
				mediaId
				progress
			}
			name
			isCustomList
			isSplitCompletedList
			status
		}
		hasNextChunk
	}
}
`

func getShortUserMediaListCollectionByStatus(
	ctx_ context.Context,
	client_ graphql.Client,
	userId int,
	mediaType MediaType,
	status MediaListStatus,
) (*getShortUserMediaListCollectionByStatusResponse, error) {
	req_ := &graphql.Request{
		OpName: "getShortUserMediaListCollectionByStatus",
		Query:  getShortUserMediaListCollectionByStatus_Operation,
		Variables: &__getShortUserMediaListCollectionByStatusInput{
			UserId:    userId,
			MediaType: mediaType,
			Status:    status,
		},
	}
	var err_ error

	var data_ getShortUserMediaListCollectionByStatusResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getUserID.
const getUserID_Operation = `
query getUserID ($name: String) {
	User(name: $name) {
		id
	}
}
`

func getUserID(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
) (*getUserIDResponse, error) {
	req_ := &graphql.Request{
		OpName: "getUserID",
		Query:  getUserID_Operation,
		Variables: &__getUserIDInput{
			Name: name,
		},
	}
	var err_ error

	var data_ getUserIDResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getUserMediaList.
const getUserMediaList_Operation = `
query getUserMediaList ($userId: Int, $mediaType: MediaType, $status: MediaListStatus) {
	MediaList(userId: $userId, type: $mediaType, status: $status) {
		id
		mediaId
		status
		progress
		media {
			id
			idMal
			title {
				romaji
				english
				native
				userPreferred
			}
			format
			synonyms
		}
	}
}
`

func getUserMediaList(
	ctx_ context.Context,
	client_ graphql.Client,
	userId int,
	mediaType MediaType,
	status MediaListStatus,
) (*getUserMediaListResponse, error) {
	req_ := &graphql.Request{
		OpName: "getUserMediaList",
		Query:  getUserMediaList_Operation,
		Variables: &__getUserMediaListInput{
			UserId:    userId,
			MediaType: mediaType,
			Status:    status,
		},
	}
	var err_ error

	var data_ getUserMediaListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getUserMediaListCollection.
const getUserMediaListCollection_Operation = `
query getUserMediaListCollection ($userId: Int, $mediaType: MediaType) {
	MediaListCollection(userId: $userId, type: $mediaType) {
		lists {
			name
			isCustomList
			isSplitCompletedList
			status
		}
		hasNextChunk
	}
}
`

func getUserMediaListCollection(
	ctx_ context.Context,
	client_ graphql.Client,
	userId int,
	mediaType MediaType,
) (*getUserMediaListCollectionResponse, error) {
	req_ := &graphql.Request{
		OpName: "getUserMediaListCollection",
		Query:  getUserMediaListCollection_Operation,
		Variables: &__getUserMediaListCollectionInput{
			UserId:    userId,
			MediaType: mediaType,
		},
	}
	var err_ error

	var data_ getUserMediaListCollectionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getUserMediaListCollectionByStatus.
const getUserMediaListCollectionByStatus_Operation = `
query getUserMediaListCollectionByStatus ($userId: Int, $mediaType: MediaType, $status: MediaListStatus) {
	MediaListCollection(userId: $userId, type: $mediaType, status: $status) {
		lists {
			entries {
				id
				mediaId
				progress
				media {
					id
					idMal
					title {
						romaji
						english
						native
						userPreferred
					}
					format
					synonyms
				}
			}
			name
			isCustomList
			isSplitCompletedList
			status
		}
		hasNextChunk
	}
}
`

func getUserMediaListCollectionByStatus(
	ctx_ context.Context,
	client_ graphql.Client,
	userId int,
	mediaType MediaType,
	status MediaListStatus,
) (*getUserMediaListCollectionByStatusResponse, error) {
	req_ := &graphql.Request{
		OpName: "getUserMediaListCollectionByStatus",
		Query:  getUserMediaListCollectionByStatus_Operation,
		Variables: &__getUserMediaListCollectionByStatusInput{
			UserId:    userId,
			MediaType: mediaType,
			Status:    status,
		},
	}
	var err_ error

	var data_ getUserMediaListCollectionByStatusResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateMediaProgress.
const updateMediaProgress_Operation = `
mutation updateMediaProgress ($mediaId: Int, $progress: Int) {
	SaveMediaListEntry(mediaId: $mediaId, progress: $progress) {
		id
		status
	}
}
`

func updateMediaProgress(
	ctx_ context.Context,
	client_ graphql.Client,
	mediaId int,
	progress int,
) (*updateMediaProgressResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateMediaProgress",
		Query:  updateMediaProgress_Operation,
		Variables: &__updateMediaProgressInput{
			MediaId:  mediaId,
			Progress: progress,
		},
	}
	var err_ error

	var data_ updateMediaProgressResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by updateMediaStatus.
const updateMediaStatus_Operation = `
mutation updateMediaStatus ($mediaId: Int, $status: MediaListStatus) {
	SaveMediaListEntry(mediaId: $mediaId, status: $status) {
		id
		status
	}
}
`

func updateMediaStatus(
	ctx_ context.Context,
	client_ graphql.Client,
	mediaId int,
	status MediaListStatus,
) (*updateMediaStatusResponse, error) {
	req_ := &graphql.Request{
		OpName: "updateMediaStatus",
		Query:  updateMediaStatus_Operation,
		Variables: &__updateMediaStatusInput{
			MediaId: mediaId,
			Status:  status,
		},
	}
	var err_ error

	var data_ updateMediaStatusResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
